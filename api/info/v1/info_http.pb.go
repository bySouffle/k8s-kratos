// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.0
// source: api/info/v1/info.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInfoCreateInfo = "/api.info.v1.Info/CreateInfo"
const OperationInfoDeleteInfo = "/api.info.v1.Info/DeleteInfo"
const OperationInfoGetInfo = "/api.info.v1.Info/GetInfo"
const OperationInfoListInfo = "/api.info.v1.Info/ListInfo"
const OperationInfoUpdateInfo = "/api.info.v1.Info/UpdateInfo"

type InfoHTTPServer interface {
	CreateInfo(context.Context, *CreateInfoRequest) (*CreateInfoReply, error)
	DeleteInfo(context.Context, *DeleteInfoRequest) (*DeleteInfoReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error)
	ListInfo(context.Context, *ListInfoRequest) (*ListInfoReply, error)
	UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoReply, error)
}

func RegisterInfoHTTPServer(s *http.Server, srv InfoHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/info/create", _Info_CreateInfo0_HTTP_Handler(srv))
	r.GET("/v1/info/create/{param.msg}", _Info_CreateInfo1_HTTP_Handler(srv))
	r.POST("/v1/info/update", _Info_UpdateInfo0_HTTP_Handler(srv))
	r.GET("/v1/info/update/{param.msg}", _Info_UpdateInfo1_HTTP_Handler(srv))
	r.POST("/v1/info/delete", _Info_DeleteInfo0_HTTP_Handler(srv))
	r.GET("/v1/info/delete/{param.msg}", _Info_DeleteInfo1_HTTP_Handler(srv))
	r.POST("/v1/info/get", _Info_GetInfo0_HTTP_Handler(srv))
	r.GET("/v1/info/get/{param.msg}", _Info_GetInfo1_HTTP_Handler(srv))
	r.POST("/v1/info/list", _Info_ListInfo0_HTTP_Handler(srv))
	r.GET("/v1/info/list/{param.msg}", _Info_ListInfo1_HTTP_Handler(srv))
}

func _Info_CreateInfo0_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoCreateInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInfo(ctx, req.(*CreateInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_CreateInfo1_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoCreateInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInfo(ctx, req.(*CreateInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_UpdateInfo0_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoUpdateInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateInfo(ctx, req.(*UpdateInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_UpdateInfo1_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoUpdateInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateInfo(ctx, req.(*UpdateInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_DeleteInfo0_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoDeleteInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInfo(ctx, req.(*DeleteInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_DeleteInfo1_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoDeleteInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInfo(ctx, req.(*DeleteInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_GetInfo0_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoGetInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInfo(ctx, req.(*GetInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_GetInfo1_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoGetInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInfo(ctx, req.(*GetInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_ListInfo0_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoListInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInfo(ctx, req.(*ListInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Info_ListInfo1_HTTP_Handler(srv InfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfoListInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInfo(ctx, req.(*ListInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInfoReply)
		return ctx.Result(200, reply)
	}
}

type InfoHTTPClient interface {
	CreateInfo(ctx context.Context, req *CreateInfoRequest, opts ...http.CallOption) (rsp *CreateInfoReply, err error)
	DeleteInfo(ctx context.Context, req *DeleteInfoRequest, opts ...http.CallOption) (rsp *DeleteInfoReply, err error)
	GetInfo(ctx context.Context, req *GetInfoRequest, opts ...http.CallOption) (rsp *GetInfoReply, err error)
	ListInfo(ctx context.Context, req *ListInfoRequest, opts ...http.CallOption) (rsp *ListInfoReply, err error)
	UpdateInfo(ctx context.Context, req *UpdateInfoRequest, opts ...http.CallOption) (rsp *UpdateInfoReply, err error)
}

type InfoHTTPClientImpl struct {
	cc *http.Client
}

func NewInfoHTTPClient(client *http.Client) InfoHTTPClient {
	return &InfoHTTPClientImpl{client}
}

func (c *InfoHTTPClientImpl) CreateInfo(ctx context.Context, in *CreateInfoRequest, opts ...http.CallOption) (*CreateInfoReply, error) {
	var out CreateInfoReply
	pattern := "/v1/info/create/{param.msg}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInfoCreateInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InfoHTTPClientImpl) DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...http.CallOption) (*DeleteInfoReply, error) {
	var out DeleteInfoReply
	pattern := "/v1/info/delete/{param.msg}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInfoDeleteInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InfoHTTPClientImpl) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...http.CallOption) (*GetInfoReply, error) {
	var out GetInfoReply
	pattern := "/v1/info/get/{param.msg}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInfoGetInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InfoHTTPClientImpl) ListInfo(ctx context.Context, in *ListInfoRequest, opts ...http.CallOption) (*ListInfoReply, error) {
	var out ListInfoReply
	pattern := "/v1/info/list/{param.msg}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInfoListInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InfoHTTPClientImpl) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...http.CallOption) (*UpdateInfoReply, error) {
	var out UpdateInfoReply
	pattern := "/v1/info/update/{param.msg}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInfoUpdateInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
